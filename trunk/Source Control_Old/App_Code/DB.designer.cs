#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="mashaweer")]
public partial class DBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertFAQ(FAQ instance);
  partial void UpdateFAQ(FAQ instance);
  partial void DeleteFAQ(FAQ instance);
  partial void InsertZonePrice(ZonePrice instance);
  partial void UpdateZonePrice(ZonePrice instance);
  partial void DeleteZonePrice(ZonePrice instance);
  partial void InsertNew(New instance);
  partial void UpdateNew(New instance);
  partial void DeleteNew(New instance);
  partial void InsertService(Service instance);
  partial void UpdateService(Service instance);
  partial void DeleteService(Service instance);
  partial void InsertSetting(Setting instance);
  partial void UpdateSetting(Setting instance);
  partial void DeleteSetting(Setting instance);
  partial void InsertSysUser(SysUser instance);
  partial void UpdateSysUser(SysUser instance);
  partial void DeleteSysUser(SysUser instance);
  partial void InsertZone(Zone instance);
  partial void UpdateZone(Zone instance);
  partial void DeleteZone(Zone instance);
  #endregion
	
	public DBDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["mashaweerConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<FAQ> FAQs
	{
		get
		{
			return this.GetTable<FAQ>();
		}
	}
	
	public System.Data.Linq.Table<ZonePrice> ZonePrices
	{
		get
		{
			return this.GetTable<ZonePrice>();
		}
	}
	
	public System.Data.Linq.Table<New> News
	{
		get
		{
			return this.GetTable<New>();
		}
	}
	
	public System.Data.Linq.Table<Service> Services
	{
		get
		{
			return this.GetTable<Service>();
		}
	}
	
	public System.Data.Linq.Table<Setting> Settings
	{
		get
		{
			return this.GetTable<Setting>();
		}
	}
	
	public System.Data.Linq.Table<SysUser> SysUsers
	{
		get
		{
			return this.GetTable<SysUser>();
		}
	}
	
	public System.Data.Linq.Table<Zone> Zones
	{
		get
		{
			return this.GetTable<Zone>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FAQ")]
public partial class FAQ : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FAQId;
	
	private string _Question;
	
	private string _Answer;
	
	private int _Language;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFAQIdChanging(int value);
    partial void OnFAQIdChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnLanguageChanging(int value);
    partial void OnLanguageChanged();
    #endregion
	
	public FAQ()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAQId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FAQId
	{
		get
		{
			return this._FAQId;
		}
		set
		{
			if ((this._FAQId != value))
			{
				this.OnFAQIdChanging(value);
				this.SendPropertyChanging();
				this._FAQId = value;
				this.SendPropertyChanged("FAQId");
				this.OnFAQIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Question
	{
		get
		{
			return this._Question;
		}
		set
		{
			if ((this._Question != value))
			{
				this.OnQuestionChanging(value);
				this.SendPropertyChanging();
				this._Question = value;
				this.SendPropertyChanged("Question");
				this.OnQuestionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Answer
	{
		get
		{
			return this._Answer;
		}
		set
		{
			if ((this._Answer != value))
			{
				this.OnAnswerChanging(value);
				this.SendPropertyChanging();
				this._Answer = value;
				this.SendPropertyChanged("Answer");
				this.OnAnswerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="Int NOT NULL")]
	public int Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ZonePrice")]
public partial class ZonePrice : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PriceId;
	
	private int _FromZone;
	
	private int _ToZone;
	
	private decimal _CarPrice;
	
	private decimal _MotorcyclePrice;
	
	private EntityRef<Zone> _Zone;
	
	private EntityRef<Zone> _Zone1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceIdChanging(int value);
    partial void OnPriceIdChanged();
    partial void OnFromZoneChanging(int value);
    partial void OnFromZoneChanged();
    partial void OnToZoneChanging(int value);
    partial void OnToZoneChanged();
    partial void OnCarPriceChanging(decimal value);
    partial void OnCarPriceChanged();
    partial void OnMotorcyclePriceChanging(decimal value);
    partial void OnMotorcyclePriceChanged();
    #endregion
	
	public ZonePrice()
	{
		this._Zone = default(EntityRef<Zone>);
		this._Zone1 = default(EntityRef<Zone>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PriceId
	{
		get
		{
			return this._PriceId;
		}
		set
		{
			if ((this._PriceId != value))
			{
				this.OnPriceIdChanging(value);
				this.SendPropertyChanging();
				this._PriceId = value;
				this.SendPropertyChanged("PriceId");
				this.OnPriceIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromZone", DbType="Int NOT NULL")]
	public int FromZone
	{
		get
		{
			return this._FromZone;
		}
		set
		{
			if ((this._FromZone != value))
			{
				if (this._Zone.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFromZoneChanging(value);
				this.SendPropertyChanging();
				this._FromZone = value;
				this.SendPropertyChanged("FromZone");
				this.OnFromZoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToZone", DbType="Int NOT NULL")]
	public int ToZone
	{
		get
		{
			return this._ToZone;
		}
		set
		{
			if ((this._ToZone != value))
			{
				if (this._Zone1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnToZoneChanging(value);
				this.SendPropertyChanging();
				this._ToZone = value;
				this.SendPropertyChanged("ToZone");
				this.OnToZoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarPrice", DbType="Decimal(18,5) NOT NULL")]
	public decimal CarPrice
	{
		get
		{
			return this._CarPrice;
		}
		set
		{
			if ((this._CarPrice != value))
			{
				this.OnCarPriceChanging(value);
				this.SendPropertyChanging();
				this._CarPrice = value;
				this.SendPropertyChanged("CarPrice");
				this.OnCarPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotorcyclePrice", DbType="Decimal(18,5) NOT NULL")]
	public decimal MotorcyclePrice
	{
		get
		{
			return this._MotorcyclePrice;
		}
		set
		{
			if ((this._MotorcyclePrice != value))
			{
				this.OnMotorcyclePriceChanging(value);
				this.SendPropertyChanging();
				this._MotorcyclePrice = value;
				this.SendPropertyChanged("MotorcyclePrice");
				this.OnMotorcyclePriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Zone_ZonePrice", Storage="_Zone", ThisKey="FromZone", OtherKey="ZoneId", IsForeignKey=true)]
	public Zone Zone
	{
		get
		{
			return this._Zone.Entity;
		}
		set
		{
			Zone previousValue = this._Zone.Entity;
			if (((previousValue != value) 
						|| (this._Zone.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Zone.Entity = null;
					previousValue.ZonePrices.Remove(this);
				}
				this._Zone.Entity = value;
				if ((value != null))
				{
					value.ZonePrices.Add(this);
					this._FromZone = value.ZoneId;
				}
				else
				{
					this._FromZone = default(int);
				}
				this.SendPropertyChanged("Zone");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Zone_ZonePrice1", Storage="_Zone1", ThisKey="ToZone", OtherKey="ZoneId", IsForeignKey=true)]
	public Zone Zone1
	{
		get
		{
			return this._Zone1.Entity;
		}
		set
		{
			Zone previousValue = this._Zone1.Entity;
			if (((previousValue != value) 
						|| (this._Zone1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Zone1.Entity = null;
					previousValue.ZonePrices1.Remove(this);
				}
				this._Zone1.Entity = value;
				if ((value != null))
				{
					value.ZonePrices1.Add(this);
					this._ToZone = value.ZoneId;
				}
				else
				{
					this._ToZone = default(int);
				}
				this.SendPropertyChanged("Zone1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.New")]
public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _NewID;
	
	private string _Title;
	
	private string _Description;
	
	private System.DateTime _CreatedDate;
	
	private int _Language;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewIDChanging(int value);
    partial void OnNewIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnLanguageChanging(int value);
    partial void OnLanguageChanged();
    #endregion
	
	public New()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int NewID
	{
		get
		{
			return this._NewID;
		}
		set
		{
			if ((this._NewID != value))
			{
				this.OnNewIDChanging(value);
				this.SendPropertyChanging();
				this._NewID = value;
				this.SendPropertyChanged("NewID");
				this.OnNewIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="Int NOT NULL")]
	public int Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ServiceId;
	
	private string _Name;
	
	private string _Description;
	
	private string _Image;
	
	private int _Language;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnLanguageChanging(int value);
    partial void OnLanguageChanged();
    #endregion
	
	public Service()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ServiceId
	{
		get
		{
			return this._ServiceId;
		}
		set
		{
			if ((this._ServiceId != value))
			{
				this.OnServiceIdChanging(value);
				this.SendPropertyChanging();
				this._ServiceId = value;
				this.SendPropertyChanged("ServiceId");
				this.OnServiceIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="Int NOT NULL")]
	public int Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SettingId;
	
	private string _SettingKey;
	
	private string _SettingValue;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingIdChanging(int value);
    partial void OnSettingIdChanged();
    partial void OnSettingKeyChanging(string value);
    partial void OnSettingKeyChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
	
	public Setting()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SettingId
	{
		get
		{
			return this._SettingId;
		}
		set
		{
			if ((this._SettingId != value))
			{
				this.OnSettingIdChanging(value);
				this.SendPropertyChanging();
				this._SettingId = value;
				this.SendPropertyChanged("SettingId");
				this.OnSettingIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string SettingKey
	{
		get
		{
			return this._SettingKey;
		}
		set
		{
			if ((this._SettingKey != value))
			{
				this.OnSettingKeyChanging(value);
				this.SendPropertyChanging();
				this._SettingKey = value;
				this.SendPropertyChanged("SettingKey");
				this.OnSettingKeyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string SettingValue
	{
		get
		{
			return this._SettingValue;
		}
		set
		{
			if ((this._SettingValue != value))
			{
				this.OnSettingValueChanging(value);
				this.SendPropertyChanging();
				this._SettingValue = value;
				this.SendPropertyChanged("SettingValue");
				this.OnSettingValueChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysUser")]
public partial class SysUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private string _Name;
	
	private string _UserName;
	
	private string _Password;
	
	private bool _IsActive;
	
	private System.DateTime _CreatedDate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
	
	public SysUser()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Zone")]
public partial class Zone : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ZoneId;
	
	private string _ArabicName;
	
	private string _EnglishName;
	
	private decimal _X;
	
	private decimal _Y;
	
	private EntitySet<ZonePrice> _ZonePrices;
	
	private EntitySet<ZonePrice> _ZonePrices1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnArabicNameChanging(string value);
    partial void OnArabicNameChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnXChanging(decimal value);
    partial void OnXChanged();
    partial void OnYChanging(decimal value);
    partial void OnYChanged();
    #endregion
	
	public Zone()
	{
		this._ZonePrices = new EntitySet<ZonePrice>(new Action<ZonePrice>(this.attach_ZonePrices), new Action<ZonePrice>(this.detach_ZonePrices));
		this._ZonePrices1 = new EntitySet<ZonePrice>(new Action<ZonePrice>(this.attach_ZonePrices1), new Action<ZonePrice>(this.detach_ZonePrices1));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ZoneId
	{
		get
		{
			return this._ZoneId;
		}
		set
		{
			if ((this._ZoneId != value))
			{
				this.OnZoneIdChanging(value);
				this.SendPropertyChanging();
				this._ZoneId = value;
				this.SendPropertyChanged("ZoneId");
				this.OnZoneIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArabicName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ArabicName
	{
		get
		{
			return this._ArabicName;
		}
		set
		{
			if ((this._ArabicName != value))
			{
				this.OnArabicNameChanging(value);
				this.SendPropertyChanging();
				this._ArabicName = value;
				this.SendPropertyChanged("ArabicName");
				this.OnArabicNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string EnglishName
	{
		get
		{
			return this._EnglishName;
		}
		set
		{
			if ((this._EnglishName != value))
			{
				this.OnEnglishNameChanging(value);
				this.SendPropertyChanging();
				this._EnglishName = value;
				this.SendPropertyChanged("EnglishName");
				this.OnEnglishNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Decimal(18,15) NOT NULL")]
	public decimal X
	{
		get
		{
			return this._X;
		}
		set
		{
			if ((this._X != value))
			{
				this.OnXChanging(value);
				this.SendPropertyChanging();
				this._X = value;
				this.SendPropertyChanged("X");
				this.OnXChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Decimal(18,15) NOT NULL")]
	public decimal Y
	{
		get
		{
			return this._Y;
		}
		set
		{
			if ((this._Y != value))
			{
				this.OnYChanging(value);
				this.SendPropertyChanging();
				this._Y = value;
				this.SendPropertyChanged("Y");
				this.OnYChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Zone_ZonePrice", Storage="_ZonePrices", ThisKey="ZoneId", OtherKey="FromZone")]
	public EntitySet<ZonePrice> ZonePrices
	{
		get
		{
			return this._ZonePrices;
		}
		set
		{
			this._ZonePrices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Zone_ZonePrice1", Storage="_ZonePrices1", ThisKey="ZoneId", OtherKey="ToZone")]
	public EntitySet<ZonePrice> ZonePrices1
	{
		get
		{
			return this._ZonePrices1;
		}
		set
		{
			this._ZonePrices1.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ZonePrices(ZonePrice entity)
	{
		this.SendPropertyChanging();
		entity.Zone = this;
	}
	
	private void detach_ZonePrices(ZonePrice entity)
	{
		this.SendPropertyChanging();
		entity.Zone = null;
	}
	
	private void attach_ZonePrices1(ZonePrice entity)
	{
		this.SendPropertyChanging();
		entity.Zone1 = this;
	}
	
	private void detach_ZonePrices1(ZonePrice entity)
	{
		this.SendPropertyChanging();
		entity.Zone1 = null;
	}
}
#pragma warning restore 1591
